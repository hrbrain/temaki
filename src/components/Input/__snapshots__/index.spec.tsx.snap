// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input format of number should match previous snapshot 1`] = `
<ThemeProvider
  theme={
    Object {
      "colors": Object {
        "grayScale": Object {
          "S0": "rgb(255, 255, 255)",
          "S10": "rgb(234, 234, 234)",
          "S100": "rgb(51, 51, 51)",
          "S20": "rgb(214, 214, 214)",
          "S30": "rgb(193, 193, 193)",
          "S40": "rgb(173, 173, 173)",
          "S5": "rgb(245, 245, 245)",
          "S50": "rgb(153, 153, 153)",
          "S60": "rgb(133, 133, 133)",
          "S70": "rgb(112, 112, 112)",
          "S80": "rgb(92, 92, 92)",
          "S90": "rgb(71, 71, 71)",
        },
        "primary": Object {
          "N20": "rgb(92, 92, 92)",
          "N40": "rgb(133, 133, 133)",
          "N60": "rgb(173, 173, 173)",
          "N80": "rgb(214, 214, 214)",
          "N95": "rgb(245, 245, 245)",
          "P20": "rgb(41, 41, 41)",
          "P40": "rgb(31, 31, 31)",
          "P60": "rgb(20, 20, 20)",
          "P80": "rgb(10, 10, 10)",
          "P95": "rgb(0, 0, 0)",
          "default": "rgb(51, 51, 51)",
        },
        "text": Object {
          "default": "#333",
        },
        "utilities": Object {
          "blue": "rgb(48, 120, 191)",
          "highlightGreen": "rgb(114, 206, 92)",
          "paleBlue": "rgb(245, 249, 252)",
          "paleGreen": "rgb(248 ,252, 247)",
          "paleRed": "rgb(253, 246, 246)",
          "red": "rgb(224, 85, 72)",
        },
      },
      "shadows": Object {
        "boxShadow": Object {
          "L1": "0 0 2px 0 rgba(0, 0, 0, 0.16)",
          "L2": "0 1px 3px 0 rgba(0, 0, 0, 0.16)",
          "L3": "0 2px 5px 0 rgba(0, 0, 0, 0.16)",
          "L4": "0 3px 8px 0 rgba(0, 0, 0, 0.16)",
          "L5": "0 5px 11px 0 rgba(0, 0, 0, 0.16)",
        },
        "dropShadow": Object {
          "L1": "0 0 2px rgba(0, 0, 0, 0.16)",
          "L2": "0 1px 3px rgba(0, 0, 0, 0.16)",
          "L3": "0 2px 5px rgba(0, 0, 0, 0.16)",
          "L4": "0 3px 8px rgba(0, 0, 0, 0.16)",
          "L5": "0 5px 11px rgba(0, 0, 0, 0.16)",
        },
      },
      "typography": Object {
        "pc": Object {
          "body": Object {
            "L": "16px",
            "S": "12px",
            "XL": "18px",
            "default": "14px",
          },
          "heading": Object {
            "H1": "24px",
            "H2": "22px",
            "H3": "20px",
            "H4": "18px",
            "H5": "16px",
            "H6": "14px",
          },
        },
        "sp": Object {
          "body": Object {
            "L": "16px",
            "S": "12px",
            "XL": "18px",
            "default": "14px",
          },
          "heading": Object {
            "H1": "24px",
            "H2": "22px",
            "H3": "20px",
            "H4": "18px",
            "H5": "16px",
            "H6": "14px",
          },
        },
      },
    }
  }
>
  <Memo()
    format="number"
    onBlur={[MockFunction]}
    onChange={[MockFunction]}
    onChangeNative={[MockFunction]}
    value={145}
  >
    <Component
      Presenter={[Function]}
      format="number"
      onBlur={[MockFunction]}
      onChange={[MockFunction]}
      onChangeNative={[MockFunction]}
      value={145}
    >
      <Component
        format="number"
        onBlur={[MockFunction]}
        onChange={[Function]}
        value="145"
      >
        <styled.input
          format="number"
          onBlur={[MockFunction]}
          onChange={[Function]}
          value="145"
        >
          <StyledComponent
            format="number"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "fHAhPc",
                  "rules": Array [
                    "
    padding: 10px 12px;
    border-radius: 6px;
    border: solid 1px ",
                    [Function],
                    ";
    transition: 0.15s border-color;

    ",
                    [Function],
                    "

    &:focus {
        outline: none;
        border-color: ",
                    [Function],
                    ";
    }
",
                  ],
                },
                "displayName": "styled.input",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onBlur={[MockFunction]}
            onChange={[Function]}
            value="145"
          >
            <input
              className="sc-bdVaJa fHAhPc"
              format="number"
              onBlur={[MockFunction]}
              onChange={[Function]}
              value="145"
            />
          </StyledComponent>
        </styled.input>
      </Component>
    </Component>
  </Memo()>
</ThemeProvider>
`;

exports[`Input format of number should match previous snapshot when provided errored prop 1`] = `
<input
  className="sc-bdVaJa dgLgqz"
  format="text"
  onChange={[Function]}
/>
`;

exports[`Input format of text should match previous snapshot 1`] = `
<ThemeProvider
  theme={
    Object {
      "colors": Object {
        "grayScale": Object {
          "S0": "rgb(255, 255, 255)",
          "S10": "rgb(234, 234, 234)",
          "S100": "rgb(51, 51, 51)",
          "S20": "rgb(214, 214, 214)",
          "S30": "rgb(193, 193, 193)",
          "S40": "rgb(173, 173, 173)",
          "S5": "rgb(245, 245, 245)",
          "S50": "rgb(153, 153, 153)",
          "S60": "rgb(133, 133, 133)",
          "S70": "rgb(112, 112, 112)",
          "S80": "rgb(92, 92, 92)",
          "S90": "rgb(71, 71, 71)",
        },
        "primary": Object {
          "N20": "rgb(92, 92, 92)",
          "N40": "rgb(133, 133, 133)",
          "N60": "rgb(173, 173, 173)",
          "N80": "rgb(214, 214, 214)",
          "N95": "rgb(245, 245, 245)",
          "P20": "rgb(41, 41, 41)",
          "P40": "rgb(31, 31, 31)",
          "P60": "rgb(20, 20, 20)",
          "P80": "rgb(10, 10, 10)",
          "P95": "rgb(0, 0, 0)",
          "default": "rgb(51, 51, 51)",
        },
        "text": Object {
          "default": "#333",
        },
        "utilities": Object {
          "blue": "rgb(48, 120, 191)",
          "highlightGreen": "rgb(114, 206, 92)",
          "paleBlue": "rgb(245, 249, 252)",
          "paleGreen": "rgb(248 ,252, 247)",
          "paleRed": "rgb(253, 246, 246)",
          "red": "rgb(224, 85, 72)",
        },
      },
      "shadows": Object {
        "boxShadow": Object {
          "L1": "0 0 2px 0 rgba(0, 0, 0, 0.16)",
          "L2": "0 1px 3px 0 rgba(0, 0, 0, 0.16)",
          "L3": "0 2px 5px 0 rgba(0, 0, 0, 0.16)",
          "L4": "0 3px 8px 0 rgba(0, 0, 0, 0.16)",
          "L5": "0 5px 11px 0 rgba(0, 0, 0, 0.16)",
        },
        "dropShadow": Object {
          "L1": "0 0 2px rgba(0, 0, 0, 0.16)",
          "L2": "0 1px 3px rgba(0, 0, 0, 0.16)",
          "L3": "0 2px 5px rgba(0, 0, 0, 0.16)",
          "L4": "0 3px 8px rgba(0, 0, 0, 0.16)",
          "L5": "0 5px 11px rgba(0, 0, 0, 0.16)",
        },
      },
      "typography": Object {
        "pc": Object {
          "body": Object {
            "L": "16px",
            "S": "12px",
            "XL": "18px",
            "default": "14px",
          },
          "heading": Object {
            "H1": "24px",
            "H2": "22px",
            "H3": "20px",
            "H4": "18px",
            "H5": "16px",
            "H6": "14px",
          },
        },
        "sp": Object {
          "body": Object {
            "L": "16px",
            "S": "12px",
            "XL": "18px",
            "default": "14px",
          },
          "heading": Object {
            "H1": "24px",
            "H2": "22px",
            "H3": "20px",
            "H4": "18px",
            "H5": "16px",
            "H6": "14px",
          },
        },
      },
    }
  }
>
  <Memo()
    format="text"
    onBlur={[MockFunction]}
    onChange={[MockFunction]}
    onChangeNative={[MockFunction]}
    value="Testing Value"
  >
    <Component
      Presenter={[Function]}
      format="text"
      onBlur={[MockFunction]}
      onChange={[MockFunction]}
      onChangeNative={[MockFunction]}
      value="Testing Value"
    >
      <Component
        format="text"
        onBlur={[MockFunction]}
        onChange={[Function]}
        value="Testing Value"
      >
        <styled.input
          format="text"
          onBlur={[MockFunction]}
          onChange={[Function]}
          value="Testing Value"
        >
          <StyledComponent
            format="text"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "fHAhPc",
                  "rules": Array [
                    "
    padding: 10px 12px;
    border-radius: 6px;
    border: solid 1px ",
                    [Function],
                    ";
    transition: 0.15s border-color;

    ",
                    [Function],
                    "

    &:focus {
        outline: none;
        border-color: ",
                    [Function],
                    ";
    }
",
                  ],
                },
                "displayName": "styled.input",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onBlur={[MockFunction]}
            onChange={[Function]}
            value="Testing Value"
          >
            <input
              className="sc-bdVaJa fHAhPc"
              format="text"
              onBlur={[MockFunction]}
              onChange={[Function]}
              value="Testing Value"
            />
          </StyledComponent>
        </styled.input>
      </Component>
    </Component>
  </Memo()>
</ThemeProvider>
`;

exports[`Input format of text should match previous snapshot when provided errored prop 1`] = `
<input
  className="sc-bdVaJa dgLgqz"
  format="text"
  onChange={[Function]}
/>
`;
