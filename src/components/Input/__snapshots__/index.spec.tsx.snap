// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input format of number should match previous snapshot 1`] = `
.c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 input[type='number']::-webkit-outer-spin-button,
.c0 input[type='number']::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.c0 input[type='number'] {
  -moz-appearance: textfield;
}

.c1 {
  height: 40px;
  padding: 0 12px;
  border-radius: 6px;
  border: solid 1px rgb(234,234,234);
  -webkit-transition: 0.15s border-color;
  transition: 0.15s border-color;
}

.c1:focus {
  outline: none;
  border-color: rgb(114,206,92);
}

.c1::-webkit-input-placeholder {
  color: rgb(214,214,214);
}

.c1::-moz-placeholder {
  color: rgb(214,214,214);
}

.c1:-ms-input-placeholder {
  color: rgb(214,214,214);
}

.c1::placeholder {
  color: rgb(214,214,214);
}

<ThemeProvider
  theme={
    Object {
      "colors": Object {
        "grayScale": Object {
          "S0": "rgb(255, 255, 255)",
          "S10": "rgb(234, 234, 234)",
          "S100": "rgb(51, 51, 51)",
          "S20": "rgb(214, 214, 214)",
          "S30": "rgb(193, 193, 193)",
          "S40": "rgb(173, 173, 173)",
          "S5": "rgb(245, 245, 245)",
          "S50": "rgb(153, 153, 153)",
          "S60": "rgb(133, 133, 133)",
          "S70": "rgb(112, 112, 112)",
          "S80": "rgb(92, 92, 92)",
          "S90": "rgb(71, 71, 71)",
        },
        "primary": Object {
          "N20": "rgb(92, 92, 92)",
          "N40": "rgb(133, 133, 133)",
          "N60": "rgb(173, 173, 173)",
          "N80": "rgb(214, 214, 214)",
          "N95": "rgb(245, 245, 245)",
          "P20": "rgb(41, 41, 41)",
          "P40": "rgb(31, 31, 31)",
          "P60": "rgb(20, 20, 20)",
          "P80": "rgb(10, 10, 10)",
          "P95": "rgb(0, 0, 0)",
          "default": "rgb(51, 51, 51)",
        },
        "text": Object {
          "default": "#333",
        },
        "utilities": Object {
          "blue": "rgb(48, 120, 191)",
          "highlightGreen": Object {
            "N20": "rgb(142, 216, 125)",
            "N40": "rgb(170, 226, 157)",
            "N60": "rgb(199, 235, 190)",
            "N80": "rgb(227, 245, 222)",
            "N90": "rgb(240, 250, 238)",
            "N95": "rgb(248, 252, 247)",
            "P20": "rgb(68, 123, 55)",
            "P40": "rgb(91, 164, 73)",
            "P60": "rgb(114, 206, 92)",
            "default": "rgb(114, 206, 92)",
          },
          "paleBlue": "rgb(245, 249, 252)",
          "paleGreen": "rgb(248 ,252, 247)",
          "paleRed": "rgb(253, 246, 246)",
          "paleYellow": "rgb(255, 255, 233)",
          "red": Object {
            "N20": "rgb(230, 119, 109)",
            "N40": "rgb(236, 153, 145)",
            "N60": "rgb(243, 187, 182)",
            "N80": "rgb(249, 221, 218)",
            "N90": "rgb(251, 238, 236)",
            "N95": "rgb(253, 246, 246)",
            "P20": "rgb(179, 68, 57)",
            "P40": "rgb(134, 51, 43)",
            "P60": "rgb(89, 34, 28)",
            "default": "rgb(224, 85, 72)",
          },
        },
      },
      "shadows": Object {
        "boxShadow": Object {
          "L1": "0 0 2px 0 rgba(0, 0, 0, 0.16)",
          "L2": "0 1px 3px 0 rgba(0, 0, 0, 0.16)",
          "L3": "0 2px 5px 0 rgba(0, 0, 0, 0.16)",
          "L4": "0 3px 8px 0 rgba(0, 0, 0, 0.16)",
          "L5": "0 5px 11px 0 rgba(0, 0, 0, 0.16)",
        },
        "dropShadow": Object {
          "L1": "0 0 2px rgba(0, 0, 0, 0.16)",
          "L2": "0 1px 3px rgba(0, 0, 0, 0.16)",
          "L3": "0 2px 5px rgba(0, 0, 0, 0.16)",
          "L4": "0 3px 8px rgba(0, 0, 0, 0.16)",
          "L5": "0 5px 11px rgba(0, 0, 0, 0.16)",
        },
      },
      "typography": Object {
        "pc": Object {
          "body": Object {
            "L": "16px",
            "S": "12px",
            "XL": "18px",
            "default": "14px",
          },
          "heading": Object {
            "H1": "24px",
            "H2": "22px",
            "H3": "20px",
            "H4": "18px",
            "H5": "16px",
            "H6": "14px",
          },
        },
        "sp": Object {
          "body": Object {
            "L": "16px",
            "S": "12px",
            "XL": "18px",
            "default": "14px",
          },
          "heading": Object {
            "H1": "24px",
            "H2": "22px",
            "H3": "20px",
            "H4": "18px",
            "H5": "16px",
            "H6": "14px",
          },
        },
      },
    }
  }
>
  <Memo()
    format="number"
    onBlur={[MockFunction]}
    onChange={[MockFunction]}
    onChangeNative={[MockFunction]}
    value={145}
  >
    <Component
      Presenter={[Function]}
      format="number"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onChangeNative={[MockFunction]}
      value={145}
    >
      <Component
        format="number"
        onBlur={[MockFunction]}
        onChange={[Function]}
        onKeyDown={[Function]}
        step={1}
        value="145"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bwzfXH",
                  "isStatic": false,
                  "lastClassName": "c0",
                  "rules": Array [
                    "
    position: relative;
    display: inline-flex;
    flex-direction: column;

    input[type='number']::-webkit-outer-spin-button,
    input[type='number']::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type='number'] {
        -moz-appearance: textfield;
    }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bwzfXH",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c0"
            >
              <styled.input
                format="number"
                onBlur={[MockFunction]}
                onChange={[Function]}
                onKeyDown={[Function]}
                step={1}
                value="145"
              >
                <StyledComponent
                  format="number"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htpNat",
                        "isStatic": false,
                        "lastClassName": "c1",
                        "rules": Array [
                          "
    height: 40px;
    padding: 0 12px;
    border-radius: 6px;
    border: solid 1px ",
                          [Function],
                          ";
    transition: 0.15s border-color;

    ",
                          [Function],
                          "

    ",
                          [Function],
                          "
    
    ",
                          [Function],
                          "

    &:focus {
        outline: none;
        border-color: ",
                          [Function],
                          ";
    }

    &::placeholder {
        color: ",
                          [Function],
                          ";
    }
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-htpNat",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onBlur={[MockFunction]}
                  onChange={[Function]}
                  onKeyDown={[Function]}
                  step={1}
                  value="145"
                >
                  <input
                    className="c1"
                    format="number"
                    onBlur={[MockFunction]}
                    onChange={[Function]}
                    onKeyDown={[Function]}
                    step={1}
                    value="145"
                  />
                </StyledComponent>
              </styled.input>
              <FormErrorMessage />
            </div>
          </StyledComponent>
        </styled.div>
      </Component>
    </Component>
  </Memo()>
</ThemeProvider>
`;

exports[`Input format of number should match previous snapshot when provided errored prop 1`] = `
.c0 {
  height: 40px;
  padding: 0 12px;
  border-radius: 6px;
  border: solid 1px rgb(234,234,234);
  -webkit-transition: 0.15s border-color;
  transition: 0.15s border-color;
  border-color: rgb(224,85,72);
}

.c0:focus {
  outline: none;
  border-color: rgb(114,206,92);
}

.c0::-webkit-input-placeholder {
  color: rgb(214,214,214);
}

.c0::-moz-placeholder {
  color: rgb(214,214,214);
}

.c0:-ms-input-placeholder {
  color: rgb(214,214,214);
}

.c0::placeholder {
  color: rgb(214,214,214);
}

<input
  className="c0"
  format="number"
  onChange={[Function]}
  onKeyDown={[Function]}
  step={1}
  value="0"
/>
`;

exports[`Input format of text should match previous snapshot 1`] = `
.c0 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 input[type='number']::-webkit-outer-spin-button,
.c0 input[type='number']::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.c0 input[type='number'] {
  -moz-appearance: textfield;
}

.c1 {
  height: 40px;
  padding: 0 12px;
  border-radius: 6px;
  border: solid 1px rgb(234,234,234);
  -webkit-transition: 0.15s border-color;
  transition: 0.15s border-color;
}

.c1:focus {
  outline: none;
  border-color: rgb(114,206,92);
}

.c1::-webkit-input-placeholder {
  color: rgb(214,214,214);
}

.c1::-moz-placeholder {
  color: rgb(214,214,214);
}

.c1:-ms-input-placeholder {
  color: rgb(214,214,214);
}

.c1::placeholder {
  color: rgb(214,214,214);
}

<ThemeProvider
  theme={
    Object {
      "colors": Object {
        "grayScale": Object {
          "S0": "rgb(255, 255, 255)",
          "S10": "rgb(234, 234, 234)",
          "S100": "rgb(51, 51, 51)",
          "S20": "rgb(214, 214, 214)",
          "S30": "rgb(193, 193, 193)",
          "S40": "rgb(173, 173, 173)",
          "S5": "rgb(245, 245, 245)",
          "S50": "rgb(153, 153, 153)",
          "S60": "rgb(133, 133, 133)",
          "S70": "rgb(112, 112, 112)",
          "S80": "rgb(92, 92, 92)",
          "S90": "rgb(71, 71, 71)",
        },
        "primary": Object {
          "N20": "rgb(92, 92, 92)",
          "N40": "rgb(133, 133, 133)",
          "N60": "rgb(173, 173, 173)",
          "N80": "rgb(214, 214, 214)",
          "N95": "rgb(245, 245, 245)",
          "P20": "rgb(41, 41, 41)",
          "P40": "rgb(31, 31, 31)",
          "P60": "rgb(20, 20, 20)",
          "P80": "rgb(10, 10, 10)",
          "P95": "rgb(0, 0, 0)",
          "default": "rgb(51, 51, 51)",
        },
        "text": Object {
          "default": "#333",
        },
        "utilities": Object {
          "blue": "rgb(48, 120, 191)",
          "highlightGreen": Object {
            "N20": "rgb(142, 216, 125)",
            "N40": "rgb(170, 226, 157)",
            "N60": "rgb(199, 235, 190)",
            "N80": "rgb(227, 245, 222)",
            "N90": "rgb(240, 250, 238)",
            "N95": "rgb(248, 252, 247)",
            "P20": "rgb(68, 123, 55)",
            "P40": "rgb(91, 164, 73)",
            "P60": "rgb(114, 206, 92)",
            "default": "rgb(114, 206, 92)",
          },
          "paleBlue": "rgb(245, 249, 252)",
          "paleGreen": "rgb(248 ,252, 247)",
          "paleRed": "rgb(253, 246, 246)",
          "paleYellow": "rgb(255, 255, 233)",
          "red": Object {
            "N20": "rgb(230, 119, 109)",
            "N40": "rgb(236, 153, 145)",
            "N60": "rgb(243, 187, 182)",
            "N80": "rgb(249, 221, 218)",
            "N90": "rgb(251, 238, 236)",
            "N95": "rgb(253, 246, 246)",
            "P20": "rgb(179, 68, 57)",
            "P40": "rgb(134, 51, 43)",
            "P60": "rgb(89, 34, 28)",
            "default": "rgb(224, 85, 72)",
          },
        },
      },
      "shadows": Object {
        "boxShadow": Object {
          "L1": "0 0 2px 0 rgba(0, 0, 0, 0.16)",
          "L2": "0 1px 3px 0 rgba(0, 0, 0, 0.16)",
          "L3": "0 2px 5px 0 rgba(0, 0, 0, 0.16)",
          "L4": "0 3px 8px 0 rgba(0, 0, 0, 0.16)",
          "L5": "0 5px 11px 0 rgba(0, 0, 0, 0.16)",
        },
        "dropShadow": Object {
          "L1": "0 0 2px rgba(0, 0, 0, 0.16)",
          "L2": "0 1px 3px rgba(0, 0, 0, 0.16)",
          "L3": "0 2px 5px rgba(0, 0, 0, 0.16)",
          "L4": "0 3px 8px rgba(0, 0, 0, 0.16)",
          "L5": "0 5px 11px rgba(0, 0, 0, 0.16)",
        },
      },
      "typography": Object {
        "pc": Object {
          "body": Object {
            "L": "16px",
            "S": "12px",
            "XL": "18px",
            "default": "14px",
          },
          "heading": Object {
            "H1": "24px",
            "H2": "22px",
            "H3": "20px",
            "H4": "18px",
            "H5": "16px",
            "H6": "14px",
          },
        },
        "sp": Object {
          "body": Object {
            "L": "16px",
            "S": "12px",
            "XL": "18px",
            "default": "14px",
          },
          "heading": Object {
            "H1": "24px",
            "H2": "22px",
            "H3": "20px",
            "H4": "18px",
            "H5": "16px",
            "H6": "14px",
          },
        },
      },
    }
  }
>
  <Memo()
    format="text"
    onBlur={[MockFunction]}
    onChange={[MockFunction]}
    onChangeNative={[MockFunction]}
    value="Testing Value"
  >
    <Component
      Presenter={[Function]}
      format="text"
      onBlur={[MockFunction]}
      onChange={[Function]}
      onChangeNative={[MockFunction]}
      value="Testing Value"
    >
      <Component
        format="text"
        onBlur={[MockFunction]}
        onChange={[Function]}
        value="Testing Value"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bwzfXH",
                  "isStatic": false,
                  "lastClassName": "c0",
                  "rules": Array [
                    "
    position: relative;
    display: inline-flex;
    flex-direction: column;

    input[type='number']::-webkit-outer-spin-button,
    input[type='number']::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type='number'] {
        -moz-appearance: textfield;
    }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bwzfXH",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c0"
            >
              <styled.input
                format="text"
                onBlur={[MockFunction]}
                onChange={[Function]}
                value="Testing Value"
              >
                <StyledComponent
                  format="text"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htpNat",
                        "isStatic": false,
                        "lastClassName": "c1",
                        "rules": Array [
                          "
    height: 40px;
    padding: 0 12px;
    border-radius: 6px;
    border: solid 1px ",
                          [Function],
                          ";
    transition: 0.15s border-color;

    ",
                          [Function],
                          "

    ",
                          [Function],
                          "
    
    ",
                          [Function],
                          "

    &:focus {
        outline: none;
        border-color: ",
                          [Function],
                          ";
    }

    &::placeholder {
        color: ",
                          [Function],
                          ";
    }
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-htpNat",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onBlur={[MockFunction]}
                  onChange={[Function]}
                  value="Testing Value"
                >
                  <input
                    className="c1"
                    format="text"
                    onBlur={[MockFunction]}
                    onChange={[Function]}
                    value="Testing Value"
                  />
                </StyledComponent>
              </styled.input>
              <FormErrorMessage />
            </div>
          </StyledComponent>
        </styled.div>
      </Component>
    </Component>
  </Memo()>
</ThemeProvider>
`;

exports[`Input format of text should match previous snapshot when provided errored prop 1`] = `
.c0 {
  height: 40px;
  padding: 0 12px;
  border-radius: 6px;
  border: solid 1px rgb(234,234,234);
  -webkit-transition: 0.15s border-color;
  transition: 0.15s border-color;
  border-color: rgb(224,85,72);
}

.c0:focus {
  outline: none;
  border-color: rgb(114,206,92);
}

.c0::-webkit-input-placeholder {
  color: rgb(214,214,214);
}

.c0::-moz-placeholder {
  color: rgb(214,214,214);
}

.c0:-ms-input-placeholder {
  color: rgb(214,214,214);
}

.c0::placeholder {
  color: rgb(214,214,214);
}

<input
  className="c0"
  format="text"
  onChange={[Function]}
  value=""
/>
`;
